+"<br> "
+"<br> # raw version"
+"<br> from django.shortcuts import render, get_object_or_404, redirect"
+"<br> from django.views import View"
+"<br> "
+"<br> from .forms import CourseModelForm"
+"<br> from .models import Course "
+"<br> # BASE VIEW CLass = VIEW"
+"<br> "
+"<br> "
+"<br> #custom Mixin use for inhert for other class"
+"<br> class CourseObjectMixin(object):"
+"<br> &nbsp; model = Course"
+"<br> &nbsp; def get_object(self):"
+"<br> &nbsp; &nbsp; id = self.kwargs.get(\'id\')"
+"<br> &nbsp; &nbsp; obj = None"
+"<br> &nbsp; &nbsp; if id is not None:"
+"<br> &nbsp; &nbsp; &nbsp; obj = get_object_or_404(self.model, id=id)"
+"<br> &nbsp; &nbsp; return obj "
+"<br> "
+"<br> class CourseDeleteView(CourseObjectMixin, View):"
+"<br> &nbsp; template_name = \"courses/course_delete.html\" # DetailView"
+"<br> &nbsp; def get(self, request, id=None, *args, **kwargs):"
+"<br> &nbsp; &nbsp; # GET method"
+"<br> &nbsp; &nbsp; context = {}"
+"<br> &nbsp; &nbsp; obj = self.get_object()"
+"<br> &nbsp; &nbsp; if obj is not None:"
+"<br> &nbsp; &nbsp; &nbsp; context[\'object\'] = obj"
+"<br> &nbsp; &nbsp; return render(request, self.template_name, context)"
+"<br> "
+"<br> &nbsp; def post(self, request, id=None,  *args, **kwargs):"
+"<br> &nbsp; &nbsp; # POST method"
+"<br> &nbsp; &nbsp; context = {}"
+"<br> &nbsp; &nbsp; obj = self.get_object()"
+"<br> &nbsp; &nbsp; if obj is not None:"
+"<br> &nbsp; &nbsp; &nbsp; obj.delete()"
+"<br> &nbsp; &nbsp; &nbsp; context[\'object\'] = None"
+"<br> &nbsp; &nbsp; &nbsp; return redirect(\'/courses/\')"
+"<br> &nbsp; &nbsp; return render(request, self.template_name, context)"
+"<br> "
+"<br> "
+"<br> class CourseUpdateView(CourseObjectMixin, View):"
+"<br> &nbsp; template_name = \"courses/course_update.html\" # DetailView"
+"<br> &nbsp; # override what you would typically do for your detailview"
+"<br> &nbsp; # having a method in there called objects to use in various methods"
+"<br> &nbsp; def get_object(self):"
+"<br> &nbsp; &nbsp; # get id to update"
+"<br> &nbsp; &nbsp; id = self.kwargs.get(\'id\')"
+"<br> &nbsp; &nbsp; # grabs the obj"
+"<br> &nbsp; &nbsp; obj = None"
+"<br> &nbsp; &nbsp; if id is not None:"
+"<br> &nbsp; &nbsp; &nbsp; obj = get_object_or_404(Course, id=id)"
+"<br> &nbsp; &nbsp; return obj"
+"<br> "
+"<br> &nbsp; def get(self, request, id=None, *args, **kwargs):"
+"<br> &nbsp; &nbsp; # GET method"
+"<br> &nbsp; &nbsp; context = {}"
+"<br> &nbsp; &nbsp; obj = self.get_object()"
+"<br> &nbsp; &nbsp; if obj is not None:"
+"<br> &nbsp; &nbsp; &nbsp; # pass in to myform as instance so "
+"<br> &nbsp; &nbsp; &nbsp; form = CourseModelForm(instance=obj)"
+"<br> &nbsp; &nbsp; &nbsp; context[\'object\'] = obj"
+"<br> &nbsp; &nbsp; &nbsp; context[\'form\'] = form"
+"<br> &nbsp; &nbsp; return render(request, self.template_name, context)"
+"<br> "
+"<br> &nbsp; def post(self, request, id=None,  *args, **kwargs):"
+"<br> &nbsp; &nbsp; # POST method"
+"<br> &nbsp; &nbsp; context = {}"
+"<br> &nbsp; &nbsp; # having object inside of our context"
+"<br> &nbsp; &nbsp; obj = self.get_object()"
+"<br> &nbsp; &nbsp; if obj is not None:"
+"<br> &nbsp; &nbsp; &nbsp; # this is grabbing that post data along with that instance "
+"<br> &nbsp; &nbsp; &nbsp; form = CourseModelForm(request.POST, instance=obj)"
+"<br> &nbsp; &nbsp; &nbsp; if form.is_valid():"
+"<br> &nbsp; &nbsp; &nbsp; &nbsp; form.save()"
+"<br> &nbsp; &nbsp; &nbsp; context[\'object\'] = obj"
+"<br> &nbsp; &nbsp; &nbsp; context[\'form\'] = form"
+"<br> &nbsp; &nbsp; return render(request, self.template_name, context)"
+"<br> "
+"<br> "
+"<br> class CourseCreateView(View):"
+"<br> &nbsp; template_name = \"courses/course_create.html\" # DetailView"
+"<br> &nbsp; def get(self, request, *args, **kwargs):"
+"<br> &nbsp; &nbsp; # GET method"
+"<br> &nbsp; &nbsp; form = CourseModelForm()"
+"<br> &nbsp; &nbsp; context = {\"form\": form}"
+"<br> &nbsp; &nbsp; return render(request, self.template_name, context)"
+"<br> "
+"<br> &nbsp; def post(self, request, *args, **kwargs):"
+"<br> &nbsp; &nbsp; # POST method"
+"<br> &nbsp; &nbsp; form = CourseModelForm(request.POST)"
+"<br> &nbsp; &nbsp; if form.is_valid():"
+"<br> &nbsp; &nbsp; &nbsp; form.save()"
+"<br> &nbsp; &nbsp; &nbsp; # starting all over to make another form"
+"<br> &nbsp; &nbsp; &nbsp; form = CourseModelForm()"
+"<br> &nbsp; &nbsp; context = {\"form\": form}"
+"<br> &nbsp; &nbsp; return render(request, self.template_name, context)"
+"<br> "
+"<br> "
+"<br> class CourseListView(View):"
+"<br> &nbsp; template_name = \"courses/course_list.html\""
+"<br> &nbsp; queryset = Course.objects.all()"
+"<br> "
+"<br> &nbsp; # for inherit purposes"
+"<br> &nbsp; def get_queryset(self):"
+"<br> &nbsp; &nbsp; return self.queryset"
+"<br> "
+"<br> &nbsp; def get(self, request, *args, **kwargs):"
+"<br> &nbsp; &nbsp; context = {\'object_list\': self.get_queryset()}"
+"<br> &nbsp; &nbsp; return render(request, self.template_name, context)"
+"<br> "
+"<br> # BASE VIEW Class = VIEW"
+"<br> class CourseView(CourseObjectMixin, View):"
+"<br> &nbsp; template_name = \"courses/course_detail.html\" # DetailView"
+"<br> "
+"<br> &nbsp; # new object of a class, "
+"<br> &nbsp; # object is an instace of that class sort of reference, reference self inside"
+"<br> &nbsp; "
+"<br> &nbsp; \"\"\""
+"<br> &nbsp; # pass in a parameter from url"
+"<br> &nbsp; # make sure both templates be able to work:"
+"<br> &nbsp; # path(\'\', CourseListView.as_view(), name=\'courses-list\'),"
+"<br> &nbsp; # path(\'<int:id>/\', CourseView.as_view(), name=\'course-detail\'),"
+"<br> &nbsp; # pass in "
+"<br> &nbsp; # "
+"<br> &nbsp; # id=None means id is no longer required; default"
+"<br> &nbsp; \"\"\""
+"<br> &nbsp; def get(self, request, id=None, *args, **kwargs):"
+"<br> &nbsp; &nbsp; # GET method"
+"<br> "
+"<br> &nbsp; &nbsp; context = {\'object\': self.get_object()}"
+"<br> &nbsp; &nbsp; return render(request, self.template_name, context)"
+"<br> "
+"<br> &nbsp; # def post(request, *args, **kwargs):"
+"<br> &nbsp; #     return render(request, \'about.html\', {})"
+"<br> "
+"<br> # HTTP METHODS"
+"<br> def my_fbv(request, *args, **kwargs):"
+"<br> &nbsp; print(request.method)"
+"<br> &nbsp; return render(request, \'about.html\', {}"
