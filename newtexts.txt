		["",
		+"<br> <font color=\"green\">// React Components</font>"
		+"<br> <font color=\"green\">// Components are independent and reusable bits of code. They serve the same purpose as JavaScript functions, but work in isolation and returns HTML via a render function. Components come in two types, Class components and Function components.</font>"
		+"<br> "
		+"<br> <font color=\"green\">// Create a Class Component</font>"
		+"<br> <font color=\"green\">// When creating a React component, the component\'s name must start with an upper case letter.</font>"
		+"<br> <font color=\"green\">// The component has to include the extend React.Component statement, this statement creates an inheritance to React.Component, and gives your component access to React.Component\'s functions.</font>"
		+"<br> <font color=\"green\">// The component also requires a render() method, this method returns HTML.</font>"
		+"<br> <font color=\"green\">// Ex: Create a Class component called Car</font>"
		+"<br> class Car extends React.Component {"
		+"<br> &nbsp; render() {"
		+"<br> &nbsp; &nbsp; return &lt;h2&gt;Hi, I am a Car!&lt;/h2&gt;;"
		+"<br> &nbsp; }"
		+"<br> }"
		+"<br> <font color=\"green\">// Now your React application has a component called Car, which returns a &lt;h2&gt; element.</font>"
		+"<br> <font color=\"green\">// To use this component in your application, use similar syntax as normal HTML: &lt;Car /&gt;</font>"
		+"<br> <font color=\"green\">// Ex: Display the Car component in the \"root\" element:</font>"
		+"<br> ReactDOM.render(&lt;Car /&gt;, document.getElementById(\\'root\\'));"
		+"<br> "
		+"<br> <font color=\"green\">// Create a Function Component</font>"
		+"<br> <font color=\"green\">// A Function component also returns HTML, and behaves pretty much the same way as a Class component, but Class components have some additions, and will be preferred.</font>"
		+"<br> <font color=\"green\">// Ex: Create a Function component called Car</font>"
		+"<br> function Car() {"
		+"<br> &nbsp; return &lt;h2&gt;Hi, I am also a Car!&lt;/h2&gt;;"
		+"<br> }"
		+"<br> <font color=\"green\">// Once again your React application has a Car component.</font>"
		+"<br> <font color=\"green\">// Refer to the Car component as normal HTML (except in React, components must start with an upper case letter):</font>"
		+"<br> <font color=\"green\">// Ex: Display the Car component in the \"root\" element:</font>"
		+"<br> ReactDOM.render(&lt;Car /&gt;, document.getElementById(\\'root\\'));"
		+"<br> "
		+"<br> <font color=\"green\">// Component Constructor</font>"
		+"<br> <font color=\"green\">// If there is a constructor() function in your component, this function will be called when the component gets initiated.</font>"
		+"<br> <font color=\"green\">// The constructor function is where you initiate the component\'s properties.</font>"
		+"<br> <font color=\"green\">// In React, component properties should be kept in an object called state.</font>"
		+"<br> <font color=\"green\">// The constructor function is also where you honor the inheritance of the parent component by including the super() statement, which executes the parent component\'s constructor function, and your component has access to all the functions of the parent component (React.Component).</font>"
		+"<br> <font color=\"green\">// Ex: Create a constructor function in the Car component, and add a color property:</font>"
		+"<br> class Car extends React.Component {"
		+"<br> &nbsp; constructor() {"
		+"<br> &nbsp; &nbsp; super();"
		+"<br> &nbsp; &nbsp; this.state = {color: \"red\"};"
		+"<br> &nbsp; }"
		+"<br> &nbsp; render() {"
		+"<br> &nbsp; &nbsp; return &lt;h2&gt;I am a Car!&lt;/h2&gt;;"
		+"<br> &nbsp; }"
		+"<br> }"
		+"<br> <font color=\"green\">// Ex: Use the color property in the render() function:</font>"
		+"<br> class Car extends React.Component {"
		+"<br> &nbsp; constructor() {"
		+"<br> &nbsp; &nbsp; super();"
		+"<br> &nbsp; &nbsp; this.state = {color: \"red\"};"
		+"<br> &nbsp; }"
		+"<br> &nbsp; render() {"
		+"<br> &nbsp; &nbsp; return &lt;h2&gt;I am a {this.state.color} Car!&lt;/h2&gt;;"
		+"<br> &nbsp; }"
		+"<br> }"
		+"<br> "
		+"<br> <font color=\"green\">// Components in Components</font>"
		+"<br> <font color=\"green\">// We can refer to components inside other components:</font>"
		+"<br> <font color=\"green\">// Ex: Use the Car component inside the Garage component:</font>"
		+"<br> class Car extends React.Component {"
		+"<br> &nbsp; render() {"
		+"<br> &nbsp; &nbsp; return &lt;h2&gt;I am a Car!&lt;/h2&gt;;"
		+"<br> &nbsp; }"
		+"<br> }"
		+"<br> "
		+"<br> class Garage extends React.Component {"
		+"<br> &nbsp; render() {"
		+"<br> &nbsp; &nbsp; return ("
		+"<br> &nbsp; &nbsp; &nbsp; &lt;div&gt;"
		+"<br> &nbsp; &nbsp; &nbsp; &lt;h1&gt;Who lives in my Garage?&lt;/h1&gt;"
		+"<br> &nbsp; &nbsp; &nbsp; &lt;Car /&gt;"
		+"<br> &nbsp; &nbsp; &nbsp; &lt;/div&gt;"
		+"<br> &nbsp; &nbsp; );"
		+"<br> &nbsp; }"
		+"<br> }"
		+"<br> ReactDOM.render(&lt;Garage /&gt;, document.getElementById(\\'root\\'));"
		+"<br> "
		+"<br> "
		+"<br> <font color=\"green\">// Components in Files</font>"
		+"<br> <font color=\"green\">// React is all about re-using code, and it can be smart to insert some of your components in separate files.</font>"
		+"<br> <font color=\"green\">// To do that, create a new file with a .js file extension and put the code inside it:</font>"
		+"<br> <font color=\"green\">// Note that the file must start by importing React and it has to end with the statement export default Car; or component name.</font>"
		+"<br> <font color=\"green\">// Ex: This is the new file, we named it \"App.js\":</font>"
		+"<br> import React from \\'react\\';"
		+"<br> import ReactDOM from \\'react-dom\\';"
		+"<br> "
		+"<br> class Car extends React.Component {"
		+"<br> &nbsp; render() {"
		+"<br> &nbsp; &nbsp; return &lt;h2&gt;Hi, I am a Car!&lt;/h2&gt;;"
		+"<br> &nbsp; "
		+"<br> }"
		+"<br> }"
		+"<br> export default Car;"
		+"<br> "
		+"<br> <font color=\"green\">// To be able to use the Car component, you have to import the file in your application.</font>"
		+"<br> <font color=\"green\">// Ex: Now we import the \"App.js\" file in the application, and we can use the Car component as if it was created here.</font>"
		+"<br> "
		+"<br> import React from \\'react\\';"
		+"<br> import ReactDOM from \\'react-dom\\';"
		+"<br> import Car from \\'./App.js\\';"
		+"<br> "
		+"<br> ReactDOM.render(&lt;Car /&gt;, document.getElementById(\\'root\\'));"
		,""],
